// Settings 
@gutter: 4%;    // - distance between columns
@grid-size: 12; // - num of columns
@width: 100%;   // - space that we want to use for the grid

// same size columns
.syntax() when (@num < 1) { 
	@num-of-cols: @num * @grid-size; 

	&:last-child { 
		margin-right: 0; 
	}
}

// different size columns
.syntax() when (@num >= 1) { 
	@num-of-cols: @num; 
}

.cols ( @num , @in-gutter: @gutter, @global-gutter: @gutter ) {
	.syntax();
	@col-size: ( @width / @grid-size ); 
	@cols: ( @width / ( @col-size * @num-of-cols ) );
	float: left;
	width: ( @width - ( @global-gutter * ( @cols - 1 ) ) ) / @cols;
	margin-right: @in-gutter; 
	box-sizing: border-box;	
}

// grid Container
.zs-grid-row { 
	//display:table; 
	display:block;
	
	&:before,
	&:after {
		content: " "; 
		display: table; 
	}

	&:after {
		clear: both;
	}

	form,
	form &, 
	form& {
		*:last-child >p {
			margin-right:0;
		}
	}
	&:last-child >p:last-child {
		padding-bottom:0;		
	}
	
	.zs-field-flex {
		min-width: 300em/14;
	}
}

// ## Span
.span (@num) { 
	.cols(@num, 0, 0); 
}
 
// Simple grid
.zs-grid-pad() {
	.clearfix;
	margin-right: @zs-font-padding-ratio;
}
.zs-grid-pad {
	.zs-grid-pad()
}
.zs-grid-col-1-3 { 
	.cols(1/3,0,0); 
}
.zs-grid-col-3-3 {	
	.cols(3/3,0,0);
}
.zs-grid-col-2-3 {
	.cols(2/3,0,0);
}

.zs-grid-pad(@k: 1) {
	.clearfix;
	margin-right: @zs-font-padding-ratio*@k;
}

.zs-grid-pad-2 {
	.zs-grid-pad(2);
}

.zs-grid-col-1-1 { 
	.cols(1/1,0,0); 
}
.zs-grid-col-1-2 { 
	.cols(1/2,0,0); 
}
.zs-grid-col-1-4 { 
	.cols(1/4,0,0); 
}
.zs-grid-col-1-5 { 
	.cols(1/4,0,0); 
}

.zs-grid-col-1-6 { 
	.cols(1/5,0,0); 
}

.zs-grid-col-1-7 { 
	.cols(1/7,0,0); 
}
.zs-grid-col-1-8 { 
	.cols(1/8,0,0); 
}
