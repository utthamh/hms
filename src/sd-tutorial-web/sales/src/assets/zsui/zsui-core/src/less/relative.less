// Relative box model
.padding(@t:1, @r:1, @b:1, @l:1) {
	@zs-padding-gutter: @zs-font-padding-ratio; 
	padding: 1*@t*@zs-padding-gutter*1em @r*@zs-padding-gutter*1em 1*@b*@zs-padding-gutter*1em @l*@zs-padding-gutter*1em;
}
.margin(@t:1, @r:1, @b:1, @l:1) {
	@zs-padding-gutter: @zs-font-padding-ratio; 
	margin: 1*@t*@zs-padding-gutter*1em @r*@zs-padding-gutter*1em 1*@b*@zs-padding-gutter*1em @l*@zs-padding-gutter*1em;
}
.border(@t:1, @r:1, @b:1, @l:1) {
	border-width: 1*@t*@zs-border-size*1em @r*@zs-border-size*1em 1*@b*@zs-border-size*1em @l*@zs-border-size*1em;
}

// Customization support
.spaceType(@type, @t, @r, @b, @l) when (@type = padding) {
	.padding(@t, @r, @b, @l);
}
.spaceType(@type, @t, @r, @b, @l) when (@type = margin) {
	.margin(@t, @r, @b, @l);
}
.spaceType(@type, @t, @r, @b, @l) when (@type = border) {
	.border(@t, @r, @b, @l);
}
.space(@type, @t) {
	@selector: ~'.zs-space[@{type}="@{t}"]';
	@{selector} {
		.spaceType(@type, @t, @t, @t, @t);
	}
	
}
.space(@type, @t, @r) {
	@selector: ~'.zs-space[@{type}="@{t},@{r}"]';
	@{selector} {
		.spaceType(@type, @t, @r, @t, @r);
	}	
}
.space(@type, @t, @r, @b, @l) {		
	@selector: ~'.zs-space[@{type}="@{t},@{r},@{b},@{l}"]';
	@{selector} {
		.spaceType(@type, @t, @r, @b, @l);				
	}		
}

